---
layout: post
title:  "java Exception 和 RuntimeException 异常"
category: java
date:   2021-5-13 23:55:35 +0200
---

java所有的异常类都继承Throwable类，有Exception异常和Error异常。

## 1、Error异常
### Error异常通常不用再应用程序中处理，发生此类异常意味着程序宕机了，不可逆转，比如OOM之类的异常，不需要处理。
## 2、Exception异常
### 2.1、Exception异常分为检查型异常和非检查型异常，
#### 2.1.1、非检查型异常：如RuntimeException异常及其子类，
##### 这类异常实践中直接在方法或构造器中直接抛出，或者传播到自己继承的RuntimeException子类处理（更加具有面向对象编程的思想，异常类见名知义），如下代码片段所示。@Transactional 事务注解默认对非检查型异常不做回滚处理，可以指定rollbackOn属性对需要回滚的异常做定制，如果都要捕获，建议写成Exception，这样检查和非检查异常都实现回滚，如： @Transactional(rollbackFor = Exception.class) 非检查型异常如：数组越界异常等 
```
 catch (ClassNotFoundException e){
    throw new RuntimeException("Unexpected exception", e);
}
```
或者自定义实现RuntimeException异常的子类
```
    catch (RuntimeException e) {
        throw new ConversionFailedException(TypeDescriptor.forObject(it), targetType, it, e);
    }
```
#### 2.1.2、检查型异常：除RuntimeException异常及其子类外，都是检查型异常，在程序中需要显示的处理，不然编译过不了

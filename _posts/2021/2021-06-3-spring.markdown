---
layout: post
title:  "spring官网文档解读"
category: spring
date:   2021-6-4 23:55:35 +0200
---
IoC是spring框架的核心技术，AOP是IoC的一个应用案例，spring-aop可以解决java企业应用中80%的场景。spring集成最成熟的AspectJ（aop的增强） 

## 1、IoC容器
### 1.1、Spring Ioc容器和beans
Spring Ioc即控制反转，也被称为依赖注入dependency injection (DI)，通过定义对象的依赖关系，在创建对象的时候，容器注入它的依赖，可以通过属性、构造器参数、工厂方法参数注入依赖对象。

org.springframework.beans 和 org.springframework.context 两个包是Spring Ioc容器的基础包，` BeanFactory` 接口提供一种先进地机制来管理各种类型的对象，`ApplicationContext`是BeanFactory的一个子接口，它增加如下的能力：
- 容易集成spring-aop特性
+ Message resource 处理（国际化） 
- Event应用
- 应用层面指定contexts，例如：在web应用环境中，`WebApplicationContext`
简而言之，`BeanFactory`提供结构框架和基础功能，`ApplicationContext`提供更多企业级指定的功能，`ApplicationContext`是`BeanFactory`的一个超集，接下来将使用`ApplicationContext`来描述Ioc容器

在Spring中 对象组成了应用的骨架，通过IoC管理。故Spring IoC被称作beans，即：Spring IoC容器管理应用的beans。一个bean就是一个对象，实例化、装配都是通过Spring IoC管理。反之，一个简单地bean是你应用中许多对象中的一个，他们相互依赖，通过反射来完成。
### 1.2、容器概述
这个接口`org.springframework.context.ApplicationContext`代表了Spring IoC容器，并且负责实例化、配置、装配beans。容器获得指令，什么样的对象是实例化、配置、装配通过读取配置元数据，配置元数据是xml、java注解或java代码，它让你表达组成你应用程序之间对象的依赖。

Spring提供这个`ApplicationContext`接口的一些实现类，在一个单独的应用程序中，通常是创建一个 `ClassPathXmlApplicationContext` 或 `FileSystemXmlApplicationContext`的实例，在过去的一段时间里是使用xml方式配置元数据。你也能够通过java注解或java代码的方式配置元数据。

在大多数应用场景中，清晰的用户代码是没有必要实例化一个或者更多地Spring IoC容器，例如：在web场景中，一个简单的八行样板文件是在web.xml文件中（参照1.15.4节），如果使用 Spring Tool Suite ，你也能轻松的创建样板配置通过较少的按键和敲击键盘。

下面描述了Spring是怎样高水平工作的，应用程序类和配置元数据相结合，在之后`ApplicationContext`是被创建和初始化，您有一个完全配置和可执行的系统或应用程序
[](/assets/images/container-magic.png)

#### 1.2.1. 配置元数据
在上面的图片显示，Spring IoC容器消费配置元数据，配置元数据集代表着具体的领域对象，作为开发者，告诉Spring容器实例化、配置、装配你应用程序的对象。

配置元数据是传统的提供一个简单和直觉地xml格式，之后大部分的章节将使用xml的格式来传达Spring IoC的特性。
> 注意！配置元数据不仅仅只有xml的方式，还有java的方式，目前，大多数应用都是使用基于java的配置方式。

以下将列举Spring IoC容器使用其他格式的元数据：
* 基于注解的配置：Spring2.5支持基于注解的方式配置元数据
* 基于java的配置：从Spring3.0，Spring JavaConfig项目提供许多特性，成为了Spring框架的核心。因此，你能够在应用程序的外部定义bean通过java的方式而不是xml的方式。为了使用这个新特性，看 [@Configuration](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Configuration.html), [@Bean](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Bean.html), [@Import](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Import.html), 和 [@DependsOn](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/DependsOn.html) 注解。

Spring容器管理地Spring 配置必须有一个或者超过一个的bean定义组成。基于xml的元数据配置bean，<bean>元素在<beans>里面，基于java配置，在@Configuration类里面使用@Bean注解方法。

这些bean定义组成应用程序精确的对象，通常，你定义的服务层对象，数据访问层对象（DAOs），展现层对象如Struts Action实例，基础设施对象如Hibernate SessionFactories, JMS Queues等等。通常，在容器里面，没有细腻度的配置领域对象。因为它通常是DAOs和业务逻辑创建和加载领域对象（这就是DO、DTO、PO的由来吧）,然而，你也能使用Spring集成的AspectJ注入对象[](https://docs.spring.io/spring-framework/docs/5.2.4.RELEASE/spring-framework-reference/core.html#aop-atconfigurable)。

如下展示了基于xml配置元数据的方式：
```
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <bean id="..." class="...">  1,2
        <!-- collaborators and configuration for this bean go here -->
    </bean>

    <bean id="..." class="...">
        <!-- collaborators and configuration for this bean go here -->
    </bean>

    <!-- more bean definitions go here -->

</beans>
```
1、id属性是一个字符串，标识了单个的bean定义
2、class属性定义bean的类型，使用全限定类名

id的值也是可以引用到协作的bean，这个例子没有显示引用到协作的bean，更多地看依赖[](https://docs.spring.io/spring-framework/docs/5.2.4.RELEASE/spring-framework-reference/core.html#beans-dependencies)

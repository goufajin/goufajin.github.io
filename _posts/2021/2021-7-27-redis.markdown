---
layout: post
title:  "redis持久化方式"
category: redis
date:   2021-7-23 13:25:35 +0200

---

Redis四种持久化方式：
* RDB(Redis Database): RDB在指定时间间隔内，持久化数据集时间点的快照。
- AOF(Append Only File):AOF持久化记录服务器收到的每一个写操作，启动的时候再次执行这些操作，重建原始数据集。命令被记录使用与Redis协议本身相同的格式，以一种只追加的方式。当日志变得太大时，Redis能够在后台重写日志。
+ 禁用持久化:如果你愿意，您可以完全禁用持久性，如果您希望您的数据只在服务器运行时存在。
- RDB+AOF:在同一个实例中是可能联合RDB和AOF的，注意，在这种情况下，当Redis重新启动AOF文件将被用来重建原始数据集，因为它是最完整的。

RDB优势
- RDB是Redis数据的一个非常紧凑的单文件时间点表示。RDB文件是完美的备份。例如，你可能在最近24小时内每个小时对RDB文件进行归档，并每天保存一个RDB快照，持续30天。这允许您在发生灾难时轻松恢复数据集的不同版本。
+ RDB非常适合灾难恢复，因为它是一个可以传输到远端数据中心或Amazon S3(可能是加密的)的压缩文件。
* RDB最大化Redis的性能，父进程仅仅需要做的工作就是foking一个子进程，父进程绝不会执行磁盘IO或者类似的操作。
+ 与AOF相比，RDB允许在大数据集下更快地重启。
- 对于副本，RDB支持重启和故障转移后的部分重同步。[副本](https://redis.io/topics/replication#partial-resynchronizations-after-restarts-and-failovers)

RDB劣势
- 如果你需要在Redis停止工作(例如断电)的情况下最小化数据丢失的机会，RDB是不好的。您可以在生成RDB的地方配置不同的保存点(例如在至少5分钟并对数据集进行100次写操作之后，但是您可以有多个保存点)。然而，你通常会每5分钟或更长的时间创建一个RDB快照，所以在Redis停止工作没有正确关闭的任何原因，你应该准备丢失最新的几分钟的数据。
+ 为了使用子进程在磁盘上持久化，RDB经常需要fork()。如果数据集很大，Fork()可能会很耗时，如果数据集很大，CPU性能不佳，可能会导致Redis停止服务客户几毫秒甚至一秒。AOF还需要fork()，但您可以调整重写日志的频率，而不需要在持久性上做出任何权衡。

AOF优势
- 

AOF劣势
- 同样的数据集，AOF文件通常比等效的RDB文件大。
+ 